from collections import defaultdict
from text_recognizer.data.base_data_module import BaseDataModule
from text_recognizer.data.sentence_generator import SentenceGenerator
from typing import Dict, List, Tuple

import numpy as np
import text_recognizer.metadata.emnist_lines as metadata
import torch
    

def get_samples_from_char(samples: torch.Tensor, labels: torch.Tensor) -> Dict[str, List[torch.Tensor]]:
    """Get all the sample images for a character from EMNIST dataset.

    Args:
        samples (torch.Tensor): image samples.
        labels (torch.Tensor): labels corresponding to the image samples.

    Returns:
        Dict[str, List[torch.Tensor]]: dictionary of characters and all the sample images corresponding to those characters.
    """
    samples_from_char = defaultdict(list)
    
    for sample, label in zip(samples, labels):
        samples_from_char(label).append(sample)
        
    return samples_from_char

def select_letter_samples_for_string(string: str, samples_of_char: Dict[str, List[torch.Tensor]], char_shape: Tuple[int, int] = (metadata.CHAR_HEIGHT, metadata.CHAR_WIDTH)) -> List[torch.Tensor]:
    """Select sample from the available samples for each unique character in a string.

    Args:
        string (str): a string.
        samples_of_char (Dict[str, List[torch.Tensor]]): dictionary of characters and all the sample images corresponding to those characters.
        char_shape (Tuple[int, int], optional): shape of each character image. Defaults to (metadata.CHAR_HEIGHT, metadata.CHAR_WIDTH).

    Returns:
        List[torch.Tensor]: list of image samples forming the string.
    """
    zero_image = torch.zeros(char_shape, dtype = torch.uint8)
    sample_image_of_char = {}
    
    for char in string:
        if char in sample_image_of_char:
            continue
        samples = samples_of_char[char]
        sample = samples[np.random.choice(len(samples))] if samples else zero_image
        sample_image_of_char[char] = sample.reshape(*char_shape)
        
    return [sample_image_of_char[char] for char in string]

def construct_image_from_string(string: str, samples_of_char: Dict[str, List[torch.Tensor]], min_overlap: float, max_overlap: float, width: int) -> torch.Tensor:
    """Construct image of a string.

    Args:
        string (str): a string.
        samples_of_char (Dict[str, List[torch.Tensor]]): dictionary of characters and all the sample images corresponding to those characters.
        min_overlap (float): minimum value that overlap can take.
        max_overlap (float): maximum value that overlap can take.
        width (int): width of the image.

    Returns:
        torch.Tensor: image formed by concatenating all the character images.
    """
    overlap = np.random.uniform(min_overlap, max_overlap)
    sampled_images = select_letter_samples_for_string(string, samples_of_char)
    H, W = sampled_images[0].shape
    next_overlap_width = W - int(W * overlap)
    concatenated_image = torch.zeros((H, width), dtype = torch.uint8)
    x = 0
    
    
    for image in sampled_images:
        concatenated_image[:, x : (x + W)] += image
        x += next_overlap_width
    
    return torch.minimum(torch.Tensor([255]), concatenated_image)

def create_dataset_of_images(N: int, samples_of_char: Dict[str, List[torch.Tensor]], sentence_generator: SentenceGenerator, min_overlap: float, max_overlap: float, dims: int) -> Tuple[torch.Tensor, List[str]]:
    """Create a dataset of images for labels generated by the sentence generator.

    Args:
        N (int): number of items in the dataset.
        samples_of_char (Dict[str, List[torch.Tensor]]): dictionary of characters and all the sample images corresponding to those characters.
        sentence_generator (SentenceGenerator): an instance of SentenceGenerator.
        min_overlap (float): minimum value that overlap can take.
        max_overlap (float): maximum value that overlap can take.
        dims (int): dimension of each image in the dataset.

    Returns:
        Tuple[torch.Tensor, List[str]]: a tuple containing a tensor of images and a list containing corresponding labels.
        
    """
    imgs = torch.zeros(N, dims[1], dims[2])
    labels = []
    
    for n in range(N):
        label = sentence_generator.generate()
        imgs[n] = construct_image_from_string(label, samples_of_char, min_overlap, max_overlap, dims[-1])
        labels.append(label)
    
    return imgs, labels